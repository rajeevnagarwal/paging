#include "types.h"
#include "param.h"
#include "memlayout.h"
#include "mmu.h"
#include "proc.h"
#include "x86.h"
#include "traps.h"
#include "spinlock.h"
#include "paging.h"
#include "fs.h"
#include "defs.h"


/* Allocate eight consecutive disk blocks.
 * Save the content of the physical page in the pte
 * to the disk blocks and save the block-id into the
 * pte.
 */
void
swap_page_from_pte(pte_t *pte)
{
	cprintf("In swap_page_from_pte\n");	
	uint db;
	while((db=balloc_page(SWAPPING_DISK))==0);
	cprintf("db allocated ");
	write_page_to_disk(SWAPPING_DISK,P2V(PTE_ADDR(*pte)),db);
	cprintf("page written to disk ");
	set_swapped(*pte);
	clear_present(*pte);
	*pte = (*pte & ((uint)0x0fff))|(db<<12);
	kfree(P2V(PTE_ADDR(pte)));
	
}

/* Select a victim and swap the contents to the disk.
 */
int
swap_page(pde_t *pgdir)
{

	cprintf("In swap_page\n");	
	pte_t *victim;
	victim = select_a_victim(pgdir);
	swap_page_from_pte(victim);
	return 1;	
	//panic("swap_page is not implemented");
	//return 1;
}

void allocate_page(pde_t *pgdir,uint addr)
{
	cprintf("In allocate_page\n");	
	while(allocuvm(pgdir,PGROUNDDOWN(addr),PGROUNDDOWN(addr)+PGSIZE)==0)
	{
		swap_page(pgdir);
	}
}

/* Map a physical page to the virtual address addr.
 * If the page table entry points to a swapped block
 * restore the content of the page from the swapped
 * block and free the swapped block.
 */
void
map_address(pde_t *pgdir, uint addr)
{

	//cprintf("hello rajeev");
	cprintf("In map_address\n");
	pde_t *pde;
	pte_t *pte;
	pte = uva2pte(pgdir, addr);
	if(pte==0)
	{
		cprintf("Mapping not present ");		
		pde = &pgdir[PDX(addr)];
		if(swapped(*pde))
		{
			cprintf("Swapped ");
		}
		else
		{
			cprintf("Allocating ");			
			allocate_page(pgdir,addr);
			return;
		}
	}
	if(swapped(*pte))
	{
		cprintf("Pte Swapped ");	
		uint db = get_swapped_block_id(pte);
		clear_swap(*pte);
		read_page_from_disk(SWAPPING_DISK,P2V(PTE_ADDR(*pte)),db);
		bfree_page(SWAPPING_DISK,db);
		
		
	}
	else
	{
		cprintf("Allocating ");			
		allocate_page(pgdir,addr);
		
	}
	
	//panic("done");
}

/* page fault handler */
void
handle_pgfault()
{
	cprintf("In handle_pgfault\n");	
	unsigned addr;
	struct proc *curproc = myproc();

	asm volatile ("movl %%cr2, %0 \n\t" : "=r" (addr));
	addr &= ~0xfff;
	map_address(curproc->pgdir, addr);
}
